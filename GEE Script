//===========================================================================================
//                       SAR-FLOOD MAPPING USING A CHANGE DETECTION APPROACH
//  ===========================================================================================
  
Map.centerObject(roi);  
//------------------------------- DATA SELECTION & PREPROCESSING --------------------------//

var Sebelum_Banjir = ee.ImageCollection("COPERNICUS/S1_GRD")
                        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                        .filter(ee.Filter.eq('instrumentMode', 'IW'))
                        .select('VH')
                        .filterBounds(roi)
                        .filterDate('2021-07-21T10:58:42', '2021-07-21T10:59:11')
                        .median()
                        .clip(roi);
print(Sebelum_Banjir)
Map.addLayer(Sebelum_Banjir, {}, 'Preprocessing Before')

var Saat_Banjir = ee.ImageCollection("COPERNICUS/S1_GRD")
                        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                        .filter(ee.Filter.eq('instrumentMode', 'IW'))
                        .select('VH')
                        .filterBounds(roi)
                        .filterDate('2023-10-23T22:17:43', '2023-10-23T22:18:08')
                        .median()
                        .clip(roi);
print(Saat_Banjir)
Map.addLayer(Saat_Banjir, {}, 'Preprocessing after')

//------------------------------- Filter--------------------------//
var filter_Sebelum_Banjir = Sebelum_Banjir.focal_median(30,'circle','meters'); //Speckle noise
var filter_Saat_Banjir = Saat_Banjir.focal_median(30,'circle','meters');

Map.addLayer(filter_Sebelum_Banjir,{min:-50,max:1},'Before Flood');
Map.addLayer(filter_Saat_Banjir,{min:-50,max:1},'After Flood');

//------------------------------- CHANGE DETECTION --------------------------//

var CD_difference = filter_Sebelum_Banjir.subtract(filter_Saat_Banjir);
//Map.addLayer(CD_difference, {}, 'Difference')//perubahan kedua citra

var histogram = CD_difference.select('VH').reduceRegion({
  reducer: ee.Reducer.histogram(255, 2)
      .combine('mean', null, true)
      .combine('variance', null, true), 
  geometry: roi, 
  scale: 10,
  bestEffort: true
});
print(histogram);
print(Chart.image.histogram(CD_difference.select('VH'), roi, 20));

//------------------------------- ALGORITMA OTSU--------------------------//

var otsu = function(histogram) {
  var counts = ee.Array(ee.Dictionary(histogram).get('histogram')); //jumlah kemunculan setiap intensitas
  var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'));//nilai rata-rata intensitas dalam setiap bucket histogram
  var size = means.length().get([0]);//panjang dari array means
  var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);//total jumlah piksel
  var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);//jumlah total dari semua intensitas dikalikan dengan jumlah kemunculan mereka
  var mean = sum.divide(total);//rata-rata global dari semua intensitas
  
//Iterasi Melalui Semua Thresholds dan Hitung Between-Class Variance//
  
  var indices = ee.List.sequence(1, size);
  var bss = indices.map(function(i) { //variansi kelas untuk setiap threshold
    var aCounts = counts.slice(0, 0, i);//jumlah kemunculan piksel untuk kelas pertama (di bawah threshold)
    var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);//total jumlah piksel di kelas pertama
    var aMeans = means.slice(0, 0, i);//intensitas rata-rata dari kelas pertama
    var aMean = aMeans.multiply(aCounts)//rata-rata intensitas piksel dalam kelas yang dihitung hingga ambang ke-i
        .reduce(ee.Reducer.sum(), [0]).get([0])
        .divide(aCount);
    var bCount = total.subtract(aCount);// jumlah intensitas untuk kelas kedua (di atas threshold)
    var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);
    return aCount.multiply(aMean.subtract(mean).pow(2)).add(
           bCount.multiply(bMean.subtract(mean).pow(2)));
  });
  print(ui.Chart.array.values(ee.Array(bss), 0, means));
  return means.sort(bss).get([-1]);
}; //nilai yang memaksimalkan variansi antara kelas (bss). 
//Kode ini mengurutkan means berdasarkan bss dan mengambil nilai terakhir yang merupakan nilai threshold optimal.

var threshold = otsu(histogram.get('VH_histogram'));
print('threshold', threshold);

var flooded = CD_difference.select('VH').lt(threshold);

Map.addLayer(flooded.mask(flooded), {palette: 'yellow'}, 'Tidal Flood of Coastal Demak');

//------------------------------- LUAS TOTAL BANJIR ROB--------------------------//

var floodArea = flooded.mask(flooded);
var areaImage = ee.Image.pixelArea().updateMask(floodArea);
var statistics = areaImage.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: roi,
  scale: 10,
  maxPixels: 1e13  
});

var totalFloodArea = statistics.get('area');
print('Total Tidal Flood Area (m2):', totalFloodArea);

Map.addLayer(floodArea, {palette: 'green'}, 'Total Tidal Flood Area', false);


//------------------------------- PERMANENT WATER--------------------------//

//var water = filter_Sebelum_Banjir.lt(-50).and(filter_Saat_Banjir.lt(-50));
//var water_mask = water.updateMask(water.eq(1));
//print(water);
//var waterclip = water_mask.clip(roi)
//Map.addLayer(waterclip,{palette:['Blue']},'Water')

//var permanentWater = gsw.select('seasonality').gte(12).clip(roi)
//Map.addLayer(permanentWater.selfMask(),{min:0, max:1,pallete:['blue']}, 'Permanent Water' )

// Mask Out Water Bodies
// Load or import the Hansen et al. forest change dataset.
var hansenImage = ee.Image('UMD/hansen/global_forest_change_2018_v1_6').clip(roi);
// Select the permanent water mask.
var datamask = hansenImage.select('datamask');
// Create a binary mask.
var mask = datamask.eq(1);
// Update the composite mask with the water mask.
var image = hansenImage.updateMask(mask);
//Map.addLayer(image,{min:-50,max:0, pallete:['red']},'Mask Out Water Bodies')


//------------------------------- EXPORT DATA--------------------------//

Export.image.toDrive({
  image : flooded,
  description : 'Rob_2023',
  folder: 'ROB TERBARU',
  region: roi,
  scale:10,maxPixels:1e13,
  fileFormat: 'GeoTIFF'}); 
  
//Export.image.toDrive({
 // image : permanentWater,
 // description :'PermanentWater2022',
 // folder: 'ROB FIKS',
 // region: roi,
 // scale:10,maxPixels:1e13,
  //fileFormat: 'GeoTIFF'}); 

//------------------------------- DESAIN LAYOUT--------------------------//

// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});
 
// Create legend title
var legendTitle = ui.Label({
  value: 'Legend',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});
 
// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }
      });
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      });
};
 
//  Palette with the colors
var palette =['Yellow', 'Blue'];
 
// name of the legend
var names = ['Flood Inundation','Water body'];
 
// Add color and and names
for (var i = 0; i <2; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
 
// add legend to map (alternatively you can also print the legend to the console)
Map.add(legend);

// set position of panel
var title = ui.Panel({
  style: {
    position: 'top-center',
    padding: '8px 15px'
  }
});
 
// Create legend title
var mapTitle = ui.Label({
  value: 'Flood Inundation in Demak Distrct of Central Java',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }
});
 
// Add the title to the panel
title.add(mapTitle);
Map.add(title);

